pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Build and execute tests') {
            steps {
                script {
                    def microservices = [
                        'accountservice',
                        'blockerservice',
                        'cashservice',
                        'frontservice',
                        'exchangeservice',
                        'exchangegeneratorservice',
                        'notificationservice',
                        'transferservice'
                    ]

                    microservices.each { service ->
                        echo "Building and testing ${service}"
                        dir("${service}") {
                            sh 'chmod +x gradlew'
                            sh './gradlew clean test'
                        }
                    }
                }
            }
        }

        stage('Build JARs') {
            steps {
                script {
                    [
                        'accountservice',
                        'blockerservice',
                        'cashservice',
                        'frontservice',
                        'exchangeservice',
                        'exchangegeneratorservice',
                        'notificationservice',
                        'transferservice'
                    ].each { service ->
                        echo "Building JAR for ${service}"
                        dir("${service}") {
                            sh './gradlew build -x test'
                        }
                    }
                }
            }
        }

        stage('Build Docker images') {
            steps {
                script {
                    [
                        'accountservice',
                        'blockerservice',
                        'cashservice',
                        'frontservice',
                        'exchangeservice',
                        'exchangegeneratorservice',
                        'notificationservice',
                        'transferservice'
                    ].each { service ->
                        echo "Building Docker image for ${service}"
                        sh "docker build -t ${DOCKER_REGISTRY}/${service}:${IMAGE_TAG} ./${service}"
                    }
                }
            }
        }

        stage('Deploy to TEST') {
            steps {
                sh 'find . -name "*.jar" -delete'
                sh """
                helm dependency update .
                helm upgrade --install bankapp bankapp/. \\
                  --namespace test --create-namespace
                """
            }
        }

        stage('Manual approval for PROD') {
            steps {
                input message: 'Confirm manually to deploy to PROD environment.', ok: 'Confirm'
            }
        }

        stage('Deploy to PROD') {
            steps {
                sh """
                helm dependency update .
                helm upgrade --install bankapp bankapp/. \\
                  --namespace prod --create-namespace
                """
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed - cleaning up'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}